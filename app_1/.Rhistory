install.packages("UsingR")
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long<- melt(galton)
g<- ggplot(long, aes(x=value, fill=variable))
g<- g+ geom_histogram(colour="black", binwidth=1)
g<- g+facet_grid(.~variable)
g
install.packages("UsingR")
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long<- melt(galton)
g<- ggplot(long, aes(x=value, fill=variable))
g<- g+ geom_histogram(colour="black", binwidth=1)
g<- g+facet_grid(.~variable)
g
library(UsingR);
data(galton); library(reshape); long<- melt(galton)
g<- ggplot(long, aes(x=value, fill=variable))
g<- g+ geom_histogram(colour="black", binwidth=1)
g<- g+facet_grid(.~variable)
g
data(galton)
data(galton)
library(reshape);
install.packages("reshape")
library(reshape);
long<- melt(galton)
g<- ggplot(long, aes(x=value, fill=variable))
g<- g+ geom_histogram(colour="black", binwidth=1)
.g
g
library(manipulate)
install.packages("manipulate")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(manipulate)
mse<- mean((galton$child - mu)^2)
ggplot(galton, aes(x=parent, y=child))+geom_point()
ggplot2(galton, aes(x=parent, y=child))+geom_point()
ggplot(galton, aes(x=parent, y=child))+geom_point()
library(ggplot)
library(ggplot2)
ggplot(galton, aes(x=parent, y=child))+geom_point()
ggplot2(galton, aes(x=parent, y=child))+geom_point()
require(lavaan)
install.packages("lavaan")
require(lavaan)
lsay <- read.csv(file.choose(),header=T)
model1 <- '
model1 <- '
fit1 <- growth(model1, data=lsay)
model1 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + 2*sciach3 + 3*sciach4
'
'
fit1 <- growth(model1, data=lsay)
summary(fit1)
## linear growth model with gender added
model2 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + 2*sciach3 + 3*sciach4
i ~ gender
s ~ gender
'
fit2 <- growth(model2, data=lsay)
summary(fit2)
## linear growth model with flexible curve modeling
model3 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + *sciach3 + *sciach4
i ~ gender
s ~ gender
'
fit3 <- growth(model3, data=lsay)
summary(fit3)
## Baseline linear growth model
require(lavaan)
lsay <- read.csv(file.choose(),header=T)
model1 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + 2*sciach3 + 3*sciach4
'
fit1 <- growth(model1, data=lsay)
summary(fit1)
## linear growth model with gender added
model2 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + 2*sciach3 + 3*sciach4
i ~ gender
s ~ gender
'
fit2 <- growth(model2, data=lsay)
summary(fit2)
## linear growth model with flexible curve modeling
model3 <- '
# intercept and slope with fixed coefficients
i =~ 1*sciach1 + 1*sciach2 + 1*sciach3 + 1*sciach4
s =~ 0*sciach1 + 1*sciach2 + *sciach3 + *sciach4
i ~ gender
s ~ gender
'
summary(fit3)
ALL <- read.csv(datalocation, header=T)
ALL <- read.csv(D:\Data, header=T)
ALL <- read.csv(D:\Data, header=T)
ALL <- read.csv(D:/Data/ALL, header=T)
ALL <- read.csv(D://Data/ALL, header=T)
ALL <- read.csv(D:/Data/ALL, header=T)
setwd("E:/Data")
install.packages(c("lavaan", "Rcpp"))
install.packages("lavaan")
install.packages("poLCA")
install.packages("rjags")
install.packages("mediation")
install.packages("psych")
# bar plot13
mm17 <- ddply(data, "Workhour", summarise, mCase21 = mean(Case21,na.rm=T))
bp17 <- ggplot(mm17, aes(x=Workhour, y=mCase21, fill=Workhour)) +
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,145))
bp17+theme(legend.position="none")
mm18 <- ddply(data, "Workhour", summarise, mWeekendCase21 = mean(WK_Case21,na.rm=T))
bp18 <- ggplot(mm18, aes(x=Workhour, y=mWeekendCase21, fill=Workhour)) +
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,145))
bp18+theme(legend.position="none")
setwd("D:/Data")
library(gdata)
data = read.csv("ALL.csv")  # read csv file
library(ggplot2)
library(cowplot)
library(plyr)
# bar plot13
mm17 <- ddply(data, "Workhour", summarise, mCase21 = mean(Case21,na.rm=T))
bp17 <- ggplot(mm17, aes(x=Workhour, y=mCase21, fill=Workhour)) +
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,145))
bp17+theme(legend.position="none")
mm18 <- ddply(data, "Workhour", summarise, mWeekendCase21 = mean(WK_Case21,na.rm=T))
bp18 <- ggplot(mm18, aes(x=Workhour, y=mWeekendCase21, fill=Workhour)) +
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,145))
bp18+theme(legend.position="none")
setwd("D:/Data")
library(gdata)
data = read.csv("ALL.csv")  # read csv file
library(ggplot2)
library(cowplot)
library(plyr)
install.packages("RCurl")
library(RCurl)
URL  <- "http://allnurses.com/nursing-issues-patient/"
html <- getURLContent(URL)
hold <- strsplit(html, "vip")[[1]]
titles <- rep(NA, length(hold)-1)
html <- getURLContent(URL)
hold <- strsplit(html, "vip")[[1]]
titles <- rep(NA, length(hold)-1)
IDs    <- rep(NA, length(hold)-1)
for(i in 2:length(hold)){
+   t1  <- strsplit(hold[i-1], "href=\"")[[1]]
+   t2  <- tail(t1, 1)
+   t3  <- regexpr("[0-9]{12}", t2)
+   t4  <- t3 + attr(t3, "match.length")-1
+   t5  <- substr(t2, t3, t4)
+   IDs[i-1]    <- as.numeric(t5)
+   titles[i-1] <- strsplit(hold[i], '"')[[1]][3]
+ }
length(titles)
8 + 5
8 + 5
1:250
print("hello world")
x <- 1:5
x
fix(x)
y <- c(6,7,8,9,10)
y
a <- 1
2 -> a
8 + 5
y1:250
yprint("hello world")
y1x <- 1:5
require(ggplot2)
?update.packages
install.packages("ggplot2")
install.packages("lavaan")
rm(list=ls())
setwd("E:/Data/Dissertation/cog")
data = read.csv("graph_grouping.csv",sep=",", header=T)  # read csv file
data
str(data)
data$id <- factor(data$id)
library(nlme)
## load ggplot2
require(ggplot2)
## view the first few lines of the data
head(data)
##Use this: Creating individual plots is very similar to the group level, but facetted by the ID variable.
ggplot(data = data, aes(x = time, y = ssteps)) +
theme_grey()+
geom_rect(data = subset(data,op == '1'),aes(xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf),fill="mistyrose1", alpha = 0.1)+
geom_point(shape= 20, colour = "gray30", size = 0.1) +
facet_wrap(~id, scales="free")
rm(list=ls())
setwd("E:/Data/Dissertation/cog")
data = read.csv("graph_grouping.csv",sep=",", header=T)  # read csv file
data
str(data)
data$id <- factor(data$id)
library(nlme)
## load ggplot2
require(ggplot2)
## view the first few lines of the data
head(data)
##Use this: Creating individual plots is very similar to the group level, but facetted by the ID variable.
ggplot(data = data, aes(x = time, y = ssteps)) +
theme_grey()+
geom_rect(data = subset(data,op == '1'),aes(xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf),fill="mistyrose1", alpha = 0.1)+
geom_point(shape= 20, colour = "gray30", size = 0.1) +
facet_wrap(~id, scales="free")
help(lm)
install.packages("devtools")
install.packages("githubinstall")
install.packages("devtools")
devtools::install_github("username/packagename")
devtools::install_github("fkuo2/R1")
devtools::install_github("flkuo/R")
git config --global user.name "Kuo"
file.exists("~/.ssh/id_rsa.pub")
install.packages("shiny")
help
library(shiny)
ui <- function(input,output)
ui <- function(input,output){}
rm(list=ls())
library(shiny)
ui <- fluidpage()
ui <- fluidPage()
ui <- function(input,output){}
rm(list=ls())
library(shiny)
ui <- fluidPage()
server<- function(input,output){}
shinyapp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
library(shiny)
ui <- fluidPage("Hello World")
server<- function(input,output){}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number"
value= 25, min=1, max=100)
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number"
value= 25, min=1, max=100)
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number"
value= 25, min=1, max=100)
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 25, min=1, max=100)
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
#03
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 25, min=1, max=100)
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 25, min=1, max=100),
plotOutput(outputId = "hist")
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
#04
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 25, min=1, max=100),
plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 25, min=1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main=title)
})
}
shinyApp(server = server, ui=ui)
#06
ui <- fluidPage(
sliderInput(inputId$num=47,
label= "Choose a number",
value= 25, min=1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main=title)
})
}
shinyApp(server = server, ui=ui)
#06
ui <- fluidPage(
sliderInput(inputId$num=47,
label= "Choose a number",
value= 25, min=1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(100), main=title)
})
}
shinyApp(server = server, ui=ui)
ui <- fluidPage(
sliderInput(inputId = "num",
label= "Choose a number",
value= 28, min=1, max=100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "100 random normal values"
hist(rnorm(input$num), main=title)
})
}
shinyApp(server = server, ui=ui)
runApp('C:/Users/Kuo/Downloads/webpage/flkuo.github.io/app_1')
runApp('C:/Users/Kuo/Downloads/webpage/flkuo.github.io/app_1')
runApp('C:/Users/Kuo/Downloads/webpage/flkuo.github.io/app_1')
